version: '3.8'

services:
 # Order DB :
  orderdb:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: orderdb
    environment:
      SA_PASSWORD: "Abc@1234"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - sqlserver_data:/var/lib/sqlserver/data
    ports:
      - "1435:1433"

  productdb:
    image: mysql:latest
    container_name: productdb
    environment:
      MYSQL_ROOT_PASSWORD: "Abc@123"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3309:3306"
  
   #api section
  product.api:
    image: ${DOCKER_REGISTRY-}product-api:${PLATFORM:-linux}-${TAG:-latest}
    container_name: product.api
    build:
      context: .
      dockerfile: Services/Product.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=host.docker.internal;Port=3309;Database=ProductDB;Uid=root;Pwd=Abc@123"
    depends_on: 
      - productdb
    ports:
      - "6002:80"
    restart: always
  #api section
  customer.api:
    image: ${DOCKER_REGISTRY-}customer-api:${PLATFORM:-linux}-${TAG:-latest}
    container_name: customer.api
    build:
      context: .
      dockerfile: Services/Customer.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=host.docker.internal;Port=5433;Database=CustomerDB;User Id=admin;Password=admin1234;"
    depends_on: 
      - customerdb
    ports:
      - "6003:80"
    restart: always
  #api section
  basket.api:
    image: ${DOCKER_REGISTRY-}basket-api:${PLATFORM:-linux}-${TAG:-latest}
    container_name: basket.api
    build:
      context: .
      dockerfile: Services/Basket.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "RedisCacheUrl=host.docker.internal:6379"
    depends_on: 
      - customerdb
    ports:
      - "6004:80"
    restart: always
  #api section
  ordering.api:
    image: ${DOCKER_REGISTRY-}ordering-api:${PLATFORM:-linux}-${TAG:-latest}
    container_name: ordering.api
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings : DefaultConnectionString=Server=host.docker.internal,1435;Database=OrderDB;User Id=sa;Password=Abc@1234;MultipleActiveResultSets=true"
    depends_on: 
      - orderdb
    ports:
      - "6005:80"
    restart: always

  #portainer
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    
  #basketdb: redis
  basketdb:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
  #rabbitmq
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  #customerdb: postgres
  customerdb:
    image: postgres:alpine3.16
    container_name: customerdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=CustomerDB
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@tedu.com.vn
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

networks:
  default:
    name: tedu_microservices
    driver: bridge

#volumes section
volumes:
  sqlserver_data:
    name: sqlserver_data
  mysql_data:
    name: mysql_data
  portainer_data:
    name: portainer_data
  postgres_data:
    name: postgres_data
  pgadmin_data:
    name: pgadmin_data